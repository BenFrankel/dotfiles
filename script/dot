#!/usr/bin/env bash

set -eu
# set -x

usage() {
    printf 'Usage: dot <command> [arguments]

Description: Dotfile manager; run `dot get` to get started.

Available commands:

    get
      + Install latest configs & packages
    restore
      + Restore backup configs & packages

    activate
      + Activate local configs
    deactivate
      + Restore backup configs

    diff
      + Compare local packages to list
    sync
      + Sync local packages with list
    save
      + Save local packages to list

Administrative:

    push <message>
      + Push local configs
'
    exit 1
}

[ $# -ge 1  ] || usage
[ $# -eq 1 -o "$1" == "push" ] || usage


DOT_DIR="${HOME}/.dotfiles"
CONFIG_DIR="${DOT_DIR}/config"
SCRIPT_DIR="${DOT_DIR}/script"
BACKUP_DIR="${DOT_DIR}/backup"
BACKUP_FILES_DIR="${BACKUP_DIR}/files"
PACK_DIR="${DOT_DIR}/pack"


# Print progress
progress() {
    echo "$(tput bold)$(tput setaf 2)*$(tput sgr0) $(tput bold)$1$(tput sgr0)..."
}

# Print info
info() {
    echo "$(tput bold)$(tput setaf 6)--$(tput sgr0) $(tput bold)$1$(tput sgr0)"
}

# Ask for yes / no confirmation
prompt() {
    read -r -p "$(tput bold)$(tput setaf 6)--$(tput sgr0) $(tput bold)$1$(tput sgr0) [Y/n] " choice
    case $choice in
        [nN][oO]|[nN])
            return 0
            ;;
        *)
            return 1
    esac
}

# Load package lists
load() {
    [ $# -eq 1 ] && ext="$1" || ext=''
    cat "${PACK_DIR}/pacman${ext}" "${PACK_DIR}/aur${ext}"
}

# Save packages to lists
save() {
    [ $# -eq 1 ] && ext="$1" || ext=''
    pacman -Qqen | sort > "${PACK_DIR}/pacman${ext}"
    pacman -Qqem | sort > "${PACK_DIR}/aur${ext}"
}

# Sync with local package lists
sync() {
    [ $# -ge 1 ] && ext="$1" || ext=''
    [ $# -eq 2 ] && old="$2" || old='.old'
    
    if [ ! -f "${PACK_DIR}/pacman${ext}" -a ! -f "${PACK_DIR}/aur${ext}" ]; then
        info "No pacman${ext} or aur${ext} in ${PACK_DIR} to sync with"
        return 0
    fi
    
    progress "Backing up installed packages"
    save "${old}"
    echo

    progress "Finding local packages to remove"
    packages="$(comm -13 "${PACK_DIR}/pacman${ext}" "${PACK_DIR}/pacman${old}")"
    packages+="$(comm -13 "${PACK_DIR}/aur${ext}" "${PACK_DIR}/aur${old}")"
    if [ -n "${packages}" ]; then
        echo
        echo $packages
        echo
        case $(prompt "Remove packages?") in
            0)
                info "No packages removed"
                ;;
            *)
                sudo pacman -Rns --noconfirm $packages
                ;;
        esac
    else
        info "No packages need to be removed"
    fi
    echo

    progress "Finding missing packages to install"
    packages="$(comm -23 "${PACK_DIR}/pacman${ext}" "${PACK_DIR}/pacman${old}")"
    packages_aur="$(comm -23 "${PACK_DIR}/aur${ext}" "${PACK_DIR}/aur${old}")"
    if [ -n "${packages}" -o -n "${packages_aur}" ]; then
        echo
        [ -n "${packages}" ] && echo $packages
        [ -n "${packages_aur}" ] && echo $packages_aur
        echo
        case $(prompt "Install packages?") in
            0)
                info "No packages installed"
                ;;
            *)
                [ -n "${packages}" ] && sudo pacman -S --noconfirm $packages
                [ -n "${packages_aur}" ] && yaourt -S --noconfirm $packages_aur
                ;;
        esac
                
    else
        info "No packages need to be installed"
    fi
    
    return 0
}

# Get latest version of repository
get-repo() {
    progress "Getting latest repository"
    if [ ! -d "${DOT_DIR}/.git" ]; then
        git clone https://github.com/BenFrankel/dotfiles "${DOT_DIR}"
        mkdir -p "${BACKUP_FILES_DIR}" "${PACK_DIR}"
    else
        cd "${DOT_DIR}"
        git pull origin master
    fi
}

push-repo() {
    cd "${DOT_DIR}"
    git add .
    git commit -m "$1"
    git push origin master
}

# Set up all the necessary glue
activate() {
    ./glue init
    
    progress "Setting up links to dotfiles"
    for path in $(find "${CONFIG_DIR}" -maxdepth 1 -type f); do
        filename=$(basename "${path}")
        ./glue activate "${path}" "${HOME}/.${filename}"
    done

    progress "Setting up links to scripts"
    mkdir -p "${HOME}/bin"
    ./glue activate "${SCRIPT_DIR}/dot" "${HOME}/bin/dot"

    progress "Activating package configurations"
    for package in $(find "${CONFIG_DIR}" -mindepth 1 -maxdepth 1 -type d); do
        info "$(basename "${package}")"
        cd "${package}"
        for line in "$(eval ./dot-glue)"; do
            ./glue activate ${line}
        done
    done

    progress "Activating xinitrc"
    error "Not yet implemented"
}


# Main dispatch
case $1 in
    get)
        get-repo
        echo
        
        activate
        echo
        
        sync
        echo

	# TODO:
	#
	# Download and install font awesome if necessary
	# Clone and compile fork of i3lock if necessary
	# Add LightDM service to systemd if necessary
	# Activate xinitrc
	#
	# Configurations:
	#
	# LightDM
	# compton
	# dunst
	# emacs
	# pacman
	# 

        progress "Setting LightDM as the display manager"
        error "Not yet implemented"
        echo

        progress "Setting i3-gaps as the window manager"
        error "Not yet implemented"
        echo
        
        progress "Setting Zsh as the default shell"
        chsh -s $(which zsh)
        ;;
    restore)
        progress "Restoring replaced files"
        ./glue restore
        echo

        progress "Restoring packages"
        sync '.old' '.tmp'
        ;;
    activate)
        progress "Activating configuration"
        activate
        ;;
    deactivate)
        progress "Deactivating configuration"
        ./glue restore
        ;;
    save)
        progress "Saving local packages to list"
        save
        ;;
    diff)
        progress "Finding your backup configuration"
        cd "${BACKUP_FILES_DIR}"
        if [ -z "$(find .)" ]; then
            info "You have no backup configuration"
        else
            echo
	    ./glue list
            echo
        fi
        
        progress "Comparing your packages to the list"
        
        save ".tmp"
        diff="$(comm -3 "${PACK_DIR}/pacman.tmp" "${PACK_DIR}/pacman")"
        diff+="$(comm -3 "${PACK_DIR}/aur.tmp" "${PACK_DIR}/aur")"
        rm "${PACK_DIR}/pacman.tmp" "${PACK_DIR}/aur.tmp"

        if [ -n "${diff}" ]; then
            echo
            echo -e "$(tput bold)Local\tMissing$(tput sgr0)"
            echo "${diff}"
        else
            info "Your packages are all synced"
        fi
        echo
        ;;
    sync)
        sync
        ;;
    push)
        progress "Saving installed packages"
        save
        echo
        
        progress "Pushing to repository"
        push-repo "${@:2}"
        ;;
    *) usage
esac

exit 0

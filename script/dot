#!/usr/bin/env bash

set -eu
# set -x

usage() {
    printf "Usage: $0 <command> [arguments]

Description: Dotfile manager; run "\`"dot get"\`" to get started.

Available commands:

    get
      + Install latest configs & packages
    restore
      + Restore backup configs & packages

    activate
      + Activate local configs
    deactivate
      + Restore backup configs

    diff
      + Compare local packages to list
    sync
      + Sync local packages with list
    save
      + Save local packages to list

Administrative:

    push <message>
      + Push local configs
"
    exit 1
}

[ $# -ge 1  ] || usage
[ $# -eq 1 -o "$1" == "push" ] || usage


dot_dir="${HOME}/.dotfiles"
config_dir="${dot_dir}/config"
script_dir="${dot_dir}/script"
backup_dir="${dot_dir}/backup"
backup_files_dir="${backup_dir}/files"
pack_dir="${dot_dir}/pack"
assets_dir="${dot_dir}/assets"
dot_glue="${script_dir}/dot-glue"


# Print progress
progress() {
    echo "$(tput bold)$(tput setaf 2)*$(tput sgr0) $(tput bold)$1$(tput sgr0)..."
}

# Print info
info() {
    echo "$(tput bold)$(tput setaf 6) --$(tput sgr0) $(tput bold)$1$(tput sgr0)"
}

error() {
    echo "$(tput bold)$(tput setaf 1) >> Error:$(tput sgr0)$(tput bold) $1$(tput sgr0)"
}

# Ask for yes / no confirmation
prompt() {
    local choice
    read -r -p "$(tput bold)$(tput setaf 6)--$(tput sgr0) $(tput bold)$1$(tput sgr0) [Y/n] " choice
    case $choice in
        [Yy][Ee][SsPp]|[Yy][Ee][Aa][Hh]|[Yy])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Load package lists
load() {
    [ $# -eq 1 ] && local ext="$1" || local ext=''
    cat "${pack_dir}/pacman${ext}" "${pack_dir}/aur${ext}"
}

# Save packages to lists
save() {
    [ $# -eq 1 ] && local ext="$1" || local ext=''
    pacman -Qqen | sort > "${pack_dir}/pacman${ext}"
    pacman -Qqem | sort > "${pack_dir}/aur${ext}"
}

# Sync with local package lists
sync() {
    [ $# -ge 1 ] && local ext="$1" || local ext=''
    [ $# -eq 2 ] && local old="$2" || local old='.old'
    
    if [ ! -f "${pack_dir}/pacman${ext}" ] && [ ! -f "${pack_dir}/aur${ext}" ]; then
        info "No pacman${ext} or aur${ext} in ${pack_dir} to sync with"
        return 0
    fi
    
    progress "Backing up installed packages"
    save "$old"
    echo

    if ! which yay; then
        progress "Buliding yay"
        mkdir -p "${HOME}/build"
        git clone https://aur.archlinux.org/yay.git
        cd "${HOME}/build/yay" && makepkg -si
    fi

    progress "Finding local packages to remove"
    packages="$(comm -13 "${pack_dir}/pacman${ext}" "${pack_dir}/pacman${old}")"
    packages+=" $(comm -13 "${pack_dir}/aur${ext}" "${pack_dir}/aur${old}")"
    if [ "$packages" != ' ' ]; then
        echo
        echo $packages
        echo
        if prompt 'Remove packages?'; then
            sudo pacman -Rns --noconfirm $packages
        else
            info 'No packages removed'
        fi
    else
        info "No packages need to be removed"
    fi
    echo

    progress "Finding missing packages to install"
    packages="$(comm -23 "${pack_dir}/pacman${ext}" "${pack_dir}/pacman${old}")"
    packages_aur="$(comm -23 "${pack_dir}/aur${ext}" "${pack_dir}/aur${old}")"
    if [ -n "${packages}${packages_aur}" ]; then
        echo
        [ -n "$packages" ] && sudo pacman -S $packages
        [ -n "$packages_aur" ] && yay -S $packages_aur
    else
        info "No packages need to be installed"
    fi
    
    return 0
}

# Get latest version of repository
get-repo() {
    progress "Getting latest repository"
    if [ ! -d "${dot_dir}/.git" ]; then
        git clone https://github.com/BenFrankel/dotfiles "$dot_dir"
        mkdir -p "$backup_files_dir" "$pack_dir"
    else
        cd "$dot_dir"
        git pull origin master
    fi
}

# Create user directories
create-user-dirs() {
    progress "Creating user directories"

    mkdir -p "${HOME}/build"

    mkdir -p "${HOME}/data/video"
    mkdir -p "${HOME}/data/music"
    mkdir -p "${HOME}/data/image/walls"
    mkdir -p "${HOME}/data/image/screens"
    mkdir -p "${HOME}/data/audio"

    mkdir -p "${HOME}/dev/repos"

    mkdir -p "${HOME}/docs/self"
    mkdir -p "${HOME}/docs/forms"
    mkdir -p "${HOME}/docs/books"
    mkdir -p "${HOME}/docs/org"

    mkdir -p "${HOME}/misc"

    mkdir -p "${HOME}/sandbox"

    mkdir -p "${HOME}/tmp"

    mkdir -p "${HOME}/work"
} 

push-repo() {
    cd "$dot_dir"
    git add .
    git commit -m "$1"
    git push origin master
}

# Set up all the necessary glue
activate() {
    eval "$dot_glue" --init

    progress "Setting up links to scripts"
    mkdir -p "${HOME}/.local/bin"
    for path in $(find "$script_dir" -mindepth 1 -type f); do
        info "$(basename "$path")"
        eval "$dot_glue" --symbolic-link "$path" "${HOME}/.local/bin/$(basename "$path")"
    done
    echo
    
    progress "Setting up links to dotfiles"
    for path in $(find "$config_dir" -maxdepth 1 -type f); do
        eval "$dot_glue" --symbolic-link "$path" "${HOME}/.$(basename "$path")"
    done
    echo

    progress "Setting up links to assets"
    for dir in $(find "$assets_dir" -mindepth 1 -maxdepth 1 -type d); do
        info "$(basename $dir)"
        cd "$dir"
        ./dot-activate
    done

    progress "Activating package configurations"
    for package in $(find "$config_dir" -mindepth 1 -maxdepth 1 -type d); do
        info "$(basename "$package")"
        cd "$package"
        ./dot-activate
    done
}


# Dispatch
case $1 in
    get)
        get-repo
        echo

        create-user-dirs
        echo
        
        if prompt 'Activate configuration?'; then
            activate
        fi
        echo
        
        sync
        echo

        if prompt 'Enable LightDM (display manager & greeter)?'; then
            sudo systemctl enable lightdm
        fi
        echo

        iw_dev="$(iw dev | grep -m 1 '^\s*Interface .*$' | sed 's/\s*Interface //')"
        if prompt "Enable netctl-auto@${iw_dev} (automatic wifi connection)?"; then
            sudo systemctl enable netctl-auto@"$iw_dev"
        fi
        echo
        
        if prompt 'Set Zsh as your default shell?'; then
            chsh -s "$(which zsh)"
        fi
        ;;

    restore)
        progress "Restoring replaced files"
        eval "$dot_glue" --restore
        echo

        progress "Restoring packages"
        sync '.old' '.tmp'
        ;;

    activate)
        progress "Activating configuration"
        activate
        ;;

    deactivate)
        progress "Deactivating configuration"
        eval "$dot_glue" --restore
        ;;

    save)
        progress "Saving local packages to list"
        save
        ;;

    diff)
        progress "Finding your backup configuration"
        cd "$backup_files_dir"
        if [ -z "$(sudo find .)" ]; then
            info "You have no backup configuration"
        else
            echo
            eval "$dot_glue"
            echo
        fi
        
        progress "Comparing your packages to the list"
        
        save '.tmp'
        diff="$(comm -3 "${pack_dir}/pacman.tmp" "${pack_dir}/pacman")"
        diff_aur="$(comm -3 "${pack_dir}/aur.tmp" "${pack_dir}/aur")"
        rm "${pack_dir}/pacman.tmp" "${pack_dir}/aur.tmp"

        if [ -n "$diff" ] || [ -n "$diff" ]; then
            echo
            echo -e "$(tput bold)Local\tMissing$(tput sgr0)"
            echo -n "$diff"
            [ -n "$diff" ] && [ -n "$diff_aur" ] && echo
            echo -n "$diff_aur"
            echo
        else
            info "Your packages are all synced"
        fi
        echo
        ;;

    sync)
        sync
        ;;

    push)
        if prompt 'Save installed packages?'; then
            save
        fi
        echo
        
        progress 'Pushing repository'
        push-repo "${@:2}"
        ;;

    *)
        usage
esac

exit 0

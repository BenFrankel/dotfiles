#!/usr/bin/env bash

set -eu
# set -x

usage() {
    printf 'Usage: dot <command> [arguments]

Description: Dotfile manager; run `dot get` to get started.

Available commands:

    get               Install latest configs
    restore           Restore backup configs

    diff              Compare local packages to list
    sync              Install missing & remove local
    save              Save local packages to list

Administrative:

    push <message>    Push local configs
'
    exit 1
}

[ $# -ge 1  ] || usage
[ $# -eq 1 -o "$1" == "push" ] || usage


DOT_DIR="${HOME}/.dotfiles"
CONFIG_DIR="${DOT_DIR}/config"
SCRIPT_DIR="${DOT_DIR}/script"
BACKUP_DIR="${DOT_DIR}/backup"
PACK_DIR="${DOT_DIR}/pack"


progress() {
    echo "$(tput bold)$(tput setaf 2)*$(tput sgr0) $(tput bold)$1$(tput sgr0)..."
}

info() {
    echo "$(tput bold)$(tput setaf 6)--$(tput sgr0) $(tput bold)$1$(tput sgr0)"
}

prompt() {
    read -r -p "$(tput bold)$(tput setaf 6)--$(tput sgr0) $(tput bold)$1$(tput sgr0) [Y/n] " choice
    case $choice in
        [nN][oO]|[nN])
            return 0
            ;;
        *)
            return 1
    esac
}

pack-load() {
    [ $# -eq 1 ] && ext="$1" || ext=''
    cat "${PACK_DIR}/pacman${ext}" "${PACK_DIR}/aur${ext}"
}

pack-save() {
    [ $# -eq 1 ] && ext="$1" || ext=''
    pacman -Qqen | sort > "${PACK_DIR}/pacman${ext}"
    pacman -Qqem | sort > "${PACK_DIR}/aur${ext}"
}

pack-sync() {
    progress "Backing up installed packages"
    pack-save ".old"
    echo

    progress "Refreshing package databases"
    sudo pacman -Sy
    echo

    progress "Finding unlisted packages to remove"
    packages="$(comm -13 "${PACK_DIR}/pacman" "${PACK_DIR}/pacman.old")"
    packages+="$(comm -13 "${PACK_DIR}/aur" "${PACK_DIR}/aur.old")"
    if [ -n "${packages}" ]; then
        echo
        echo $packages
        echo
        case $(prompt "Remove packages?") in
            0)
                info "No packages removed"
                ;;
            *)
                sudo pacman -Rns --noconfirm $packages
                ;;
        esac
    else
        info "No packages need to be removed"
    fi
    echo

    progress "Finding listed packages to install"
    packages="$(comm -23 "${PACK_DIR}/pacman" "${PACK_DIR}/pacman.old")"
    packages_aur="$(comm -23 "${PACK_DIR}/aur" "${PACK_DIR}/aur.old")"
    if [ -n "${packages}" -o -n "${packages_aur}" ]; then
        echo
        [ -n "${packages}" ] && echo $packages
        [ -n "${packages_aur}" ] && echo $packages_aur
        echo
        case $(prompt "Install packages?") in
            0)
                info "No packages installed"
                ;;
            *)
                [ -n "${packages}" ] && sudo pacman -S --noconfirm $packages
                [ -n "${packages_aur}" ] && yaourt -S --noconfirm $packages_aur
                ;;
        esac
                
    else
        info "No packages need to be installed"
    fi
    
    return 0
}

pack-restore() {
    progress "Restoring packages"
    if [ ! -f "${PACK_DIR}/pacman.old" -a ! -f "${PACK_DIR}/aur.old" ]; then
        info "No list of packages to restore"
        return 0
    fi
    
    progress "Refreshing package databases"
    sudo pacman -Sy
    echo

    progress "Finding packages to reinstall"
    packages="$(comm -13 "${PACK_DIR}/pacman" "${PACK_DIR}/pacman.old")"
    if [ -n "${packages}" ]; then
        info "Installing with pacman:"
        echo
        echo $packages
        echo
        sudo pacman -S --noconfirm $packages
    else
        info "No packages to install from pacman"
    fi
    packages="$(comm -13 "${PACK_DIR}/aur" "${PACK_DIR}/aur.old")"
    if [ -n "${packages}" ]; then
        info "Installing with yaourt:"
        echo
        echo $packages
        echo
        yaourt -S --noconfirm $packages
    else
        info "No packages to install from yaourt"
    fi
    echo

    progress "Finding packages to remove"
    packages="$(comm -23 "${PACK_DIR}/pacman" "${PACK_DIR}/pacman.old")"
    packages+="$(comm -23 "${PACK_DIR}/aur" "${PACK_DIR}/aur.old")"
    if [ -n "${packages}" ]; then
        info "Removing packages:"
        echo
        echo $packages
        echo
        sudo pacman -Rns --noconfirm $packages
    else
        info "No packages to remove"
    fi

    rm -f "${PACK_DIR}/pacman.old" "${PACK_DIR}/aur.old"
}

get-repo() {
    progress "Getting latest repository"
    if [ ! -d "${DOT_DIR}/.git" ]; then
        git clone https://github.com/BenFrankel/dotfiles "${DOT_DIR}"
        mkdir -p "${BACKUP_DIR}" "${PACK_DIR}"
    else
        cd "${DOT_DIR}"
        git pull origin master
    fi
}

push-repo() {
    cd "${DOT_DIR}"
    git add .
    git commit -m "$1"
    git push origin master
}

link() {
    # Fail if not given exactly 2 arguments
    [ $# -eq 2 ] || return 1
    
    # Get absolute path of target
    target=$(echo $(cd $(dirname "$2") && pwd -P)/$(basename "$2"))
    
    # Do nothing if the link already exists
    [ -h "${target}" ] && [ "$(realpath ${target})" -ef "$1" ] && return 0

    # Back up an existing file
    [ -f "${target}" ] && cp --parents "${target}" "${BACKUP_DIR}"
    
    # Make the link
    ln -sf "$1" "${target}"
}

setup() {
    progress "Setting up links to dotfiles"
    for path in $(find "${CONFIG_DIR}" -maxdepth 1 -type f); do
        filename=$(basename "${path}")
        link "${path}" "${HOME}/.${filename}"
    done

    progress "Setting up links to scripts"
    mkdir -p "${HOME}/bin"
    for path in $(find "${SCRIPT_DIR}" -maxdepth 1 -type f); do
        filename=$(basename "${path}")
        link "${path}" "${HOME}/bin/{filename}"
    done

    progress "Setting up package configurations"
    for package in $(find "${CONFIG_DIR}" -mindepth 1 -maxdepth 1 -type d); do
        eval "${package}/setup"
    done
}


case $1 in
    get)
        get-repo
        echo
        
        setup
        echo
        
        pack-sync
        echo
        
        progress "Setting Zsh as the default shell"
        chsh -s $(which zsh)
        ;;
    restore)
        # TODO: Restore backup configs
        # TODO: Restore backup config packs
        pack-restore
        ;;
    save)
        pack-save
        ;;
    diff)
        progress "Comparing your packages to the list"
        pack-save ".tmp"
        diff="$(comm -3 "${PACK_DIR}/pacman" "${PACK_DIR}/pacman.tmp")"
        diff+="$(comm -3 "${PACK_DIR}/aur" "${PACK_DIR}/aur.tmp")"

        if [ -n "${diff}" ]; then
            echo
            echo -e "$(tput bold)Missing\tLocal$(tput sgr0)"
            echo "${diff}"
        else
            info "Your packages are already synced"
        fi
        ;;
    sync)
        pack-sync
        ;;
    push)
        progress "Saving installed packages"
        pack-save
        echo
        
        progress "Pushing to repository"
        push-repo "${@:2}"
        ;;
    *) usage
esac

exit 0
